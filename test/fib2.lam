let succ = lam n. lam f. lam x. f (n f x) in
let _0 = lam f. lam x. x in
let _1 = succ _0 in
let _2 = succ _1 in
let _3 = succ _2 in
let _4 = succ _3 in
let _5 = succ _4 in
let _6 = succ _5 in
let _7 = succ _6 in
let _8 = succ _7 in
let _9 = succ _8 in

let pred = lam n. lam f. lam x. n (lam g. lam h. h (g f)) (lam u. x) (lam u. u) in
let add = lam m. lam n. n succ m in

let iszero = lam n. lam x. lam y. n (lam z. y) x in
let isone = lam n. (iszero (pred n)) in

let if = lam x. x in
let Y = lam h. ((lam x. (h (lam a. ((x x) a)))) (lam x. (h (lam a. ((x x) a))))) in

let fib = Y (lam f. lam n.   if (iszero n) _0
                            (if (isone  n) _1 (add (f (pred n)) (f (pred (pred n)))))) in

fib _7
